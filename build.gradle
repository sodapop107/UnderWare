plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version + (System.getenv("CIRCLE_BUILD_NUM") != null ? ("-" + System.getenv("CIRCLE_BUILD_NUM")) : "")
group = project.maven_group

repositories {

    // GitHub
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }

    // Litematica
    maven {
        url = "https://www.cursemaven.com"
    }

    // Malilib
    maven {
        url 'https://masa.dy.fi/maven'
    }

    maven {
        url 'https://m2.dv8tion.net/releases'
    }

    //Meteor
    maven {
		name = "meteor-maven"
		url = "https://maven.meteordev.org"
	}
    maven {
        name = "meteor-maven-snapshots"
        url = "https://maven.meteordev.org/snapshots"
    }

    //Other
    maven {
        name = "vram"
        url = "https://maven.vram.io//"
    }
}

dependencies {
	def library = { id ->
		implementation id
		shadow id
	}

	// Fabric
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Compat fixes
    modCompileOnly fabricApi.module("fabric-renderer-indigo", project.api_version)
    modCompileOnly("me.jellysquid.mods:sodium-fabric:${project.sodium_version}") { transitive = false }
    modCompileOnly("io.vram:canvas-fabric-mc118:1.0.+") { transitive = false }

	// Baritone integration
    modImplementation "baritone:baritone:${project.baritone_version}"
    include "baritone:baritone:${project.baritone_version}"

    // JSON
    library "org.json:json:${project.json_version}"

    // Flatlaf
    implementation "com.formdev:flatlaf:${project.flatlaf_version}"

    //Seeds .locate feature
    modImplementation 'com.github.hube12:SEED:master-SNAPSHOT'
    include 'com.github.hube12:SEED:master-SNAPSHOT'

    // Music
    library "com.github.Walkyst:lavaplayer:${project.lavaplayer_version}"
    library "com.sedmelluq:lava-common:${project.lava_common_version}"
    library "com.sedmelluq:lavaplayer-natives:${project.lavaplayer_natives_version}"

    // Libraries
    library "meteordevelopment:orbit:${project.orbit_version}"
    library "meteordevelopment:starscript:${project.starscript_version}"
    library "meteordevelopment:discord-ipc:${project.discordipc_version}"
    library "org.reflections:reflections:${project.reflections_version}"

    // Other
    library "org.apache.httpcomponents:httpclient:${project.apache_http_client_version}"
    library "com.fasterxml.jackson.core:jackson-core:${project.jackson_version}"
    library "com.fasterxml.jackson.core:jackson-databind:${project.jackson_version}"
    library "com.fasterxml.jackson.core:jackson-annotations:${project.jackson_version}"
    library "org.jsoup:jsoup:${project.jsoup_version}"
}

loom {
    accessWidenerPath = file("src/main/resources/under-ware.accesswidener")
}

shadowJar {
	configurations = [ project.configurations.shadow ]
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": project.version, "devbuild": System.getenv("CIRCLE_BUILD_NUM") != null ? System.getenv("CIRCLE_BUILD_NUM") : ""
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding("UTF-8")
}

jar {
	from "LICENSE"

	manifest {
		attributes("Main-Class": "meteorclient.Main")
	}
}

remapJar {
	dependsOn shadowJar
	input.set(shadowJar.archiveFile)
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}

publishing {
    publications {
        java(MavenPublication) {
            artifactId = "meteor-client"
            version = System.getenv("CIRCLE_BUILD_NUM") == null ? project.mod_version : "SNAPSHOT"

            artifact(remapJar) {
                builtBy remapJar
            }

            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            artifact(javadocJar) {
                builtBy javadocJar
            }
        }
    }

    repositories {
        maven {
            name = "meteor-maven"
            url = System.getenv("CIRCLE_BUILD_NUM") == null ? "https://maven.meteordev.org" : "https://maven.meteordev.org/snapshots"

            credentials {
                username = System.getenv("MAVEN_METEOR_ALIAS")
                password = System.getenv("MAVEN_METEOR_TOKEN")
            }

            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

apply from: "scripts/packetutils.gradle"
